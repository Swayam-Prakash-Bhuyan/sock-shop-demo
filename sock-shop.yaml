# sock-shop-k8s/00-namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: sock-shop
  labels:
    name: sock-shop

---
# sock-shop-k8s/01-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-creds
  namespace: sock-shop
type: Opaque
data:
  username: YWRtaW4=  # admin
  password: YWRtaW4=  # admin

---
# sock-shop-k8s/02-carts.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts
  namespace: sock-shop
  labels:
    name: carts
spec:
  replicas: 1
  selector:
    matchLabels:
      name: carts
  template:
    metadata:
      labels:
        name: carts
    spec:
      containers:
        - name: carts
          image: quay.io/powercloud/sock-shop-carts:latest
          imagePullPolicy: IfNotPresent
          command: ["/usr/bin/java"]
          args: ["-cp", "/opt/app.jar", "-Xms64m", "-Xmx128m", "-XX:+UseG1GC", "-Djava.security.egd=file:/dev/urandom", "-Dspring.zipkin.enabled=false", "-Dloader.path=/opt/lib", "org.springframework.boot.loader.PropertiesLauncher", "--port=8080"]
          resources:
            limits:
              cpu: 300m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 200Mi
          ports:
            - containerPort: 8080
          securityContext:
            runAsNonRoot: true
            capabilities:
              drop:
                - all
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /tmp
              name: carts-vol
      volumes:
        - name: carts-vol
          emptyDir:
            medium: Memory

---
apiVersion: v1
kind: Service
metadata:
  name: carts
  namespace: sock-shop
  annotations:
    prometheus.io/scrape: "true"
  labels:
    name: carts
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    name: carts

---
# sock-shop-k8s/03-carts-db.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts-db
  namespace: sock-shop
  labels:
    name: carts-db
spec:
  replicas: 1
  selector:
    matchLabels:
      name: carts-db
  template:
    metadata:
      labels:
        name: carts-db
    spec:
      containers:
        - name: carts-db
          image: mongo:4.4
          imagePullPolicy: IfNotPresent
          ports:
            - name: mongo
              containerPort: 27017
          volumeMounts:
            - mountPath: /data/db
              name: carts-db-vol
      volumes:
        - name: carts-db-vol
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: carts-db
  namespace: sock-shop
  labels:
    name: carts-db
spec:
  ports:
    - port: 27017
      targetPort: 27017
  selector:
    name: carts-db

---
# sock-shop-k8s/04-catalogue.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogue
  namespace: sock-shop
  labels:
    name: catalogue
spec:
  replicas: 1
  selector:
    matchLabels:
      name: catalogue
  template:
    metadata:
      labels:
        name: catalogue
    spec:
      containers:
        - name: catalogue
          image: quay.io/powercloud/sock-shop-catalogue:latest
          imagePullPolicy: IfNotPresent
          command: ["/opt/app"]
          args:
            - -port=8080
            - -DSN=root:admin@tcp(catalogue-db:3306)/socksdb
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
            - containerPort: 8080
          securityContext:
            runAsNonRoot: true
            capabilities:
              drop:
                - all
            readOnlyRootFilesystem: true
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 180
            periodSeconds: 3

---
apiVersion: v1
kind: Service
metadata:
  name: catalogue
  namespace: sock-shop
  annotations:
    prometheus.io/scrape: "true"
  labels:
    name: catalogue
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    name: catalogue

---
# sock-shop-k8s/05-catalogue-db.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogue-db
  namespace: sock-shop
  labels:
    name: catalogue-db
spec:
  replicas: 1
  selector:
    matchLabels:
      name: catalogue-db
  template:
    metadata:
      labels:
        name: catalogue-db
    spec:
      containers:
        - name: catalogue-db
          image: quay.io/powercloud/sock-shop-catalogue-db:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: MARIADB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-creds
                  key: password
            - name: MARIADB_USER
              value: root
            - name: MARIADB_DATABASE
              value: socksdb
          ports:
            - name: mysql
              containerPort: 3306
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: catalogue-data
      volumes:
        - name: catalogue-data
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: catalogue-db
  namespace: sock-shop
  labels:
    name: catalogue-db
spec:
  ports:
    - port: 3306
      targetPort: 3306
  selector:
    name: catalogue-db

---
# sock-shop-k8s/06-front-end.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: front-end
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: front-end
  template:
    metadata:
      labels:
        name: front-end
    spec:
      containers:
        - name: front-end
          image: quay.io/powercloud/sock-shop-front-end:latest
          imagePullPolicy: IfNotPresent
          command: ["/usr/bin/npm"]
          args: ["start"]
          resources:
            limits:
              cpu: 300m
              memory: 1000Mi
            requests:
              cpu: 100m
              memory: 300Mi
          ports:
            - containerPort: 8079
          env:
            - name: SESSION_REDIS
              value: "true"
          securityContext:
            runAsNonRoot: true
            capabilities:
              drop:
                - all
            readOnlyRootFilesystem: true
          livenessProbe:
            httpGet:
              path: /
              port: 8079
            initialDelaySeconds: 5
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /
              port: 8079
            initialDelaySeconds: 5
            periodSeconds: 3
          volumeMounts:
            - mountPath: /opt/app-root/src/.npm/_cacache
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: front-end
  namespace: sock-shop
  annotations:
    prometheus.io/scrape: "true"
  labels:
    name: front-end
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 8079
      nodePort: 30001
  selector:
    name: front-end

---
# sock-shop-k8s/07-orders.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders
  namespace: sock-shop
  labels:
    name: orders
spec:
  replicas: 1
  selector:
    matchLabels:
      name: orders
  template:
    metadata:
      labels:
        name: orders
    spec:
      containers:
        - name: orders
          image: quay.io/powercloud/sock-shop-orders:latest
          imagePullPolicy: IfNotPresent
          command: ["/usr/bin/java"]
          args: ["-cp", "/app.jar", "-Xms64m", "-Xmx128m", "-XX:+UseG1GC", "-Djava.security.egd=file:/dev/urandom", "-Dspring.zipkin.enabled=false", "-Dloader.path=/opt/lib", "org.springframework.boot.loader.PropertiesLauncher", "--port=8080"]
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 300Mi
          ports:
            - containerPort: 8080
          securityContext:
            runAsNonRoot: true
            capabilities:
              drop:
                - all
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: orders
  namespace: sock-shop
  annotations:
    prometheus.io/scrape: "true"
  labels:
    name: orders
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    name: orders

---
# sock-shop-k8s/08-orders-db.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders-db
  namespace: sock-shop
  labels:
    name: orders-db
spec:
  replicas: 1
  selector:
    matchLabels:
      name: orders-db
  template:
    metadata:
      labels:
        name: orders-db
    spec:
      containers:
        - name: orders-db
          image: mongo:4.4
          imagePullPolicy: IfNotPresent
          ports:
            - name: mongo
              containerPort: 27017
          volumeMounts:
            - mountPath: /data/db
              name: orders-db-vol
      volumes:
        - name: orders-db-vol
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: orders-db
  namespace: sock-shop
  labels:
    name: orders-db
spec:
  ports:
    - port: 27017
      targetPort: 27017
  selector:
    name: orders-db

---
# sock-shop-k8s/09-payment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment
  namespace: sock-shop
  labels:
    name: payment
spec:
  replicas: 1
  selector:
    matchLabels:
      name: payment
  template:
    metadata:
      labels:
        name: payment
    spec:
      containers:
        - name: payment
          image: quay.io/powercloud/sock-shop-payment:latest
          imagePullPolicy: IfNotPresent
          command: ["/payment/app"]
          args: ["-port=8080"]
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 99m
              memory: 100Mi
          ports:
            - containerPort: 8080
          securityContext:
            runAsNonRoot: true
            privileged: false
            capabilities:
              drop:
                - all
              add:
                - NET_BIND_SERVICE
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: payment
  namespace: sock-shop
  annotations:
    prometheus.io/scrape: "true"
  labels:
    name: payment
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    name: payment

---
# sock-shop-k8s/10-queue-master.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: queue-master
  namespace: sock-shop
  labels:
    name: queue-master
spec:
  replicas: 1
  selector:
    matchLabels:
      name: queue-master
  template:
    metadata:
      labels:
        name: queue-master
    spec:
      containers:
        - name: queue-master
          image: quay.io/powercloud/sock-shop-queue-master:latest
          imagePullPolicy: IfNotPresent
          command: ["/usr/bin/java"]
          args: ["-cp", "/opt/app.jar", "-Dloader.path=/opt/lib", "org.springframework.boot.loader.PropertiesLauncher", "--port=8080"]
          env:
            - name: JAVA_OPTS
              value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
          resources:
            limits:
              cpu: 300m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 300Mi
          ports:
            - containerPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: queue-master
  namespace: sock-shop
  annotations:
    prometheus.io/scrape: "true"
  labels:
    name: queue-master
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    name: queue-master

---
# sock-shop-k8s/11-rabbitmq.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: sock-shop
  labels:
    name: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      name: rabbitmq
  template:
    metadata:
      labels:
        name: rabbitmq
      annotations:
        prometheus.io/scrape: "false"
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:3-management
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 15672
              name: management
            - containerPort: 5672
              name: rabbitmq
          env:
            - name: RABBITMQ_DEFAULT_USER
              value: "guest"
            - name: RABBITMQ_DEFAULT_PASS
              value: "guest"

---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: sock-shop
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
  labels:
    name: rabbitmq
spec:
  ports:
    - port: 5672
      name: rabbitmq
      targetPort: 5672
    - port: 15672
      name: management
      targetPort: 15672
  selector:
    name: rabbitmq

---
# sock-shop-k8s/12-session-db.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: session-db
  namespace: sock-shop
  labels:
    name: session-db
spec:
  replicas: 1
  selector:
    matchLabels:
      name: session-db
  template:
    metadata:
      labels:
        name: session-db
      annotations:
        prometheus.io.scrape: "false"
    spec:
      containers:
        - name: session-db
          image: redis:6-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - name: redis
              containerPort: 6379
          volumeMounts:
            - mountPath: /data
              name: sesion-db-vol
      volumes:
        - name: sesion-db-vol
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: session-db
  namespace: sock-shop
  labels:
    name: session-db
spec:
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    name: session-db

---
# sock-shop-k8s/13-shipping.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shipping
  namespace: sock-shop
  labels:
    name: shipping
spec:
  replicas: 1
  selector:
    matchLabels:
      name: shipping
  template:
    metadata:
      labels:
        name: shipping
    spec:
      containers:
        - name: shipping
          image: quay.io/powercloud/sock-shop-shipping:latest
          imagePullPolicy: IfNotPresent
          command: ["/usr/bin/java"]
          args: ["-cp", "/opt/app.jar", "-Dloader.path=/opt/lib", "org.springframework.boot.loader.PropertiesLauncher", "--port=8080"]
          env:
            - name: ZIPKIN
              value: zipkin.jaeger.svc.cluster.local
            - name: JAVA_OPTS
              value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
          resources:
            limits:
              cpu: 300m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 300Mi
          ports:
            - containerPort: 8080
          securityContext:
            runAsNonRoot: true
            capabilities:
              drop:
                - all
              add:
                - NET_BIND_SERVICE
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: shipping
  namespace: sock-shop
  annotations:
    prometheus.io/scrape: "true"
  labels:
    name: shipping
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    name: shipping

---
# sock-shop-k8s/14-user.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user
  namespace: sock-shop
  labels:
    name: user
spec:
  replicas: 1
  selector:
    matchLabels:
      name: user
  template:
    metadata:
      labels:
        name: user
    spec:
      containers:
        - name: user
          image: quay.io/powercloud/sock-shop-user:latest
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 300m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
            - containerPort: 8080
          command: ["/opt/user"]
          args: ["-port=8080", "-mongo-host=user-db:27017"]
          env:
            - name: mongo
              value: user-db:27017
            - name: HATEAOS
              value: user
            - name: USER_DATABASE
              value: mongodb
          securityContext:
            runAsNonRoot: true
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 180
            periodSeconds: 3

---
apiVersion: v1
kind: Service
metadata:
  name: user
  namespace: sock-shop
  annotations:
    prometheus.io/scrape: "true"
  labels:
    name: user
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    name: user

---
# sock-shop-k8s/15-user-db.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-db
  namespace: sock-shop
  labels:
    name: user-db
spec:
  replicas: 1
  selector:
    matchLabels:
      name: user-db
  template:
    metadata:
      labels:
        name: user-db
    spec:
      containers:
        - name: user-db
          image: quay.io/powercloud/sock-shop-user-db:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: mongo
              containerPort: 27017
          volumeMounts:
            - mountPath: /data/db-users
              name: users-db-vol
      volumes:
        - name: users-db-vol
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: user-db
  namespace: sock-shop
  labels:
    name: user-db
spec:
  ports:
    - port: 27017
      targetPort: 27017
  selector:
    name: user-db
